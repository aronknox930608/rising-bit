format_version: 1.0.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BITRISE_BIN_NAME: bitrise
  - BITRISE_IO_GO_PATH: "$GOPATH/src/github.com/bitrise-io"
  - BITRISE_PATH: $BITRISE_IO_GO_PATH/bitrise
  - GITHUB_RELEASES_URL: https://github.com/bitrise-io/${BITRISE_BIN_NAME}/releases
  - SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
    opts:
      title: SLACK_WEBHOOK_URL
      is_expand: false
  - SLACK_CHANNEL: "#bitrise-dev-lifeline"
    opts:
      title: SLACK_CHANNEL
      is_expand: false

trigger_map:
- pattern: ci/quick
  is_pull_request_allowed: true
  workflow: _test
- pattern: ci/step-template
  is_pull_request_allowed: true
  workflow: ci_step_template
- pattern: "*"
  is_pull_request_allowed: true
  workflow: ci

workflows:

  # Prepare and Setup
  #
  # Used fot bitrise-io.
  # Git clone bitrise, install envman & stepman, bitrise setup.
  _prepare_and_setup:
    steps:
    - git-clone:
        title: Git Clone bitrise
    - script:
        title: Symlink bitrise
        run_if: ".IsCI"
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            mkdir -p $BITRISE_IO_GO_PATH
            ln -s $BITRISE_SOURCE_DIR $BITRISE_PATH
          opts:
            is_expand: true
    - script:
        title: Install required testing tools
        run_if: ".IsCI"
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            brew update

            # Install dependencies
            go get -u github.com/tools/godep

            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck

            # Go lint
            go get -u github.com/golang/lint/golint
    - script:
        title: Setup --minimal
        summary: Install required tool (envman, stepman) versions.
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            godep go build -o _bin/bin-for-ci
            ./_bin/bin-for-ci setup --minimal
            rm _bin/bin-for-ci

  # Bitrise Test and Install
  #
  # Used fot testing and installing prepared bitrise.
  # go test, errcheck, go lint, go install, run step-template.
  test_and_install:
    steps:
    - script:
        title: GOPATH patch
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            envman add --key ORIG_GOPATH --value "$GOPATH"
            envman add --key GOPATH --value "$(godep path):$GOPATH"
    - script:
        title: Go Test
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            godep go test ./...
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            if [[ "${CI}" != "0" ]] ; then
              cd $BITRISE_PATH
            fi
            errcheck -asserts=true -blank=true $(godep go list ./...)
            cd $BITRISE_SOURCE_DIR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            golint_out="$(golint ./...)"
            if [[ "${golint_out}" != "" ]] ; then
              echo "=> Golint issues found:"
              echo "${golint_out}"
              exit 1
            fi
    - script:
        title: Running go install
        inputs:
        - content: |
            #!/bin/bash
            set -e
            set -v

            if [[ "${CI}" != "0" ]] ; then
              cd $BITRISE_PATH
            fi
            godep go install
            cd $BITRISE_SOURCE_DIR
    - script:
        title: Step-template test
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            cd ./_step_template
            bitrise run test

  # Bitrise ci
  #
  # Used for bitrise continous integration.
  # Prepare and Setup, Test and Install, notification.
  ci:
    before_run:
    - _prepare_and_setup
    - test_and_install
    steps:
    - slack:
        title: Slack notifications
        run_if: ".IsCI"
        inputs:
        - webhook_url: "$SLACK_WEBHOOK_URL"
        - channel: "$SLACK_CHANNEL"
        - from_username: "${BITRISE_BIN_NAME} - CI - OK"
        - from_username_on_error: "${BITRISE_BIN_NAME} - CI - ERROR"
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}

  # Dependenci Update
  #
  # Used for updating bitrise dependencies with godep
  godeps-update:
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            go get -u ./...
            rm -rf ./Godeps
            godep save ./...

  # Create Bitrise release
  #
  # Used for publishing new version of bitrise
  # CI, deploy, changelog
  create-release:
    before_run:
    - ci
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            if [ -f _bin/tmpbin ] ; then
              rm _bin/tmpbin
            fi
            go build -o _bin/tmpbin
            binversion="$(_bin/tmpbin -version)"
            echo "binversion: ${binversion}"
            mkdir -p _bin/${binversion}
            finalpth=_bin/${binversion}/${BITRISE_BIN_NAME}-$(uname -s)-$(uname -m)
            echo "finalpth: ${finalpth}"
            mv _bin/tmpbin "${finalpth}"
            # register the version for next steps
            envman add --key RELEASE_VERSION --value "${binversion}"
    - script:
        title: Creating release changelog template
        inputs:
        - content: |-
            changelog_path = "./_changelogs/#{ENV['RELEASE_VERSION']}.md"
            puts " * changelog_path: #{changelog_path}"
            template_content = File.read("./_changelogs/template.md")
            changelog_content = template_content.gsub("{{version}}", ENV['RELEASE_VERSION'])
            File.open(changelog_path, "w") do |f|
              f.write(changelog_content)
            end
        - runner_bin: ruby

  # Announce Bitrise release
  #
  # Used for notifying about new version of bitrise
  # deploy, notifications
  announce-release:
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            go install
            # register the version for next steps
            binversion="$(${BITRISE_BIN_NAME} -version)"
            envman add --key RELEASE_VERSION --value "${binversion}"
    - slack@2.1.0:
        title: Announce on Internal Slack channel
        inputs:
        - webhook_url: "$SLACK_WEBHOOK_URL"
        - channel: "$SLACK_CHANNEL"
        - from_username: ${BITRISE_BIN_NAME}
        - message: |
            Release v${RELEASE_VERSION} was just published! :tada:

            You can find it at ${GITHUB_RELEASES_URL}
        - emoji: ":rocket:"
    - slack@2.1.0:
        title: Announce on Public Slack channel
        inputs:
        - webhook_url: "$SLACK_WEBHOOK_URL"
        - channel: "$SLACK_CHANNEL"
        - from_username: ${BITRISE_BIN_NAME}
        - message: |
            Release v${RELEASE_VERSION} was just published! :tada:

            You can find it at ${GITHUB_RELEASES_URL}
        - emoji: ":rocket:"

  # Noop
  # empty workflow
  noop:
    Title: Empty workflow, for quick testing.

  # Fail test
  # workflow will fail
  fail-test:
    Title: Fails.
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            exit 0
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            exit 2
    - script:
        is_always_run: true
        is_skippable: true
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            exit 2
    - script:
        is_always_run: false
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            exit 0
