format_version: 1.0.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BITRISE_BIN_NAME: bitrise
  - BITRISE_IO_GO_PATH: "$GOPATH/src/github.com/bitrise-io"
  - BITRISE_PATH: $BITRISE_IO_GO_PATH/bitrise
  - GITHUB_RELEASES_URL: https://github.com/bitrise-io/${BITRISE_BIN_NAME}/releases
  - INTERNAL_DEV_SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
  - INTERNAL_DEV_SLACK_CHANNEL: bitrise-devs
  - INTERNAL_DEV_LIFELINE_SLACK_CHANNEL: bitrise-dev-lifeline

trigger_map:
- pattern: "/release"
  is_pull_request_allowed: false
  workflow: create-release
- pattern: "/release/docker-compose"
  is_pull_request_allowed: false
  workflow: create-release-with-docker-compose
- pattern: "/release/announce"
  is_pull_request_allowed: false
  workflow: announce-release
- pattern: "*"
  is_pull_request_allowed: true
  workflow: ci

workflows:
  create_changelog:
    envs:
    - FILTER_MERGE: false
    steps:
    - script:
        title: Read first and last commit
        inputs:
        - content: |
            #!/bin/bash
            set -e

            # Latest tag on origin/master

            latest_tag=$(git describe origin/master --abbrev=0 --tags)
            echo "latest_tag: $latest_tag"


            # Commit hash of latest tag

            latest_tag_commit_out=$(git show-ref $latest_tag)
            latest_tag_commit_regex="(.*) refs/tags/.*"
            if [[ $latest_tag_commit_out =~ $latest_tag_commit_regex ]] ; then
              latest_tag_commit="${BASH_REMATCH[1]}"
            else
              echo "error"
              exit 1
            fi
            echo "latest_tag_commit: $latest_tag_commit"


            # First commit since last release

            first_commit="$latest_tag_commit"
            echo "first_commit: $first_commit"


            # Last commit on current branch

            last_commit=$(git log -n 1 --pretty=format:"%H")
            echo "last_commit: $last_commit"

            envman add --key first_commit --value $first_commit
            envman add --key last_commit --value $last_commit

    - script:
        title: Collect git commits
        inputs:
        - content: |
            #!/bin/bash
            set -e

            commits=$(git log --pretty=format:'(%h) - %s' $first_commit...$last_commit)
            echo "commits: $commits"

            envman add --key commits --value "$commits"
    - script:
        title: Write commits to file
        inputs:
        - content: |
            #!/bin/bash
            set -e

            # --------------------------------------------------
            # FUNCTION: write formatted line in changelog file

            change_log_line_regex="\(([a-z0-9]*)\) - (.*)"
            function write_line {
              file="$1"
              line="$2"

              if [[ "$line" =~ $change_log_line_regex ]] ; then
                commit="${BASH_REMATCH[1]}"
                content="${BASH_REMATCH[2]}"

                # echo "commit: $commit"
                # echo "* $content" >> $file
                echo "* $line" >> $file
              fi
            }


            # --------------------------------------------------
            # Main

            changelog_file="./_changelogs/next_version_tmp.md"
            if [ ! -z "$changelog_path" ] ; then
              changelog_file=$changelog_path
            else
              if [ -f $changelog_file ] ; then
                  rm -rf $changelog_file
              fi
            fi
            echo "changelog_file: $changelog_file"

            short_first_commit=$(git rev-parse --short $first_commit)
            short_last_commit=$(git rev-parse --short $last_commit)

            echo "" >> $changelog_file
            echo "## Change history ($short_first_commit - $short_last_commit)" >> $changelog_file
            echo "" >> $changelog_file

            merge_pr_regex=".* Merge .*"
            while read -r line; do
              if [[ $FILTER_MERGE == "true" ]] ; then
                if [[ ! $line =~ $merge_pr_regex ]] ; then
                  write_line "$changelog_file" "$line"
                fi
              else
                write_line "$changelog_file" "$line"
              fi
            done <<< "$commits"

  _prepare_and_setup:
    steps:
    - git-clone:
        title: Git Clone bitrise
        inputs:
        - clone_into_dir: $BITRISE_PATH
          opts:
            is_expand: true
    - change-workdir:
        run_if: ".IsCI"
        title: cd to bitrise go path
        inputs:
        - path: $BITRISE_PATH
    - script:
        title: Install required testing tools
        run_if: ".IsCI"
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            brew update

            # Install dependencies
            go get -u github.com/tools/godep

            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck

            # Go lint
            go get -u github.com/golang/lint/golint

  test_and_install:
    before_run:
    - test
    steps:
    - script:
        title: Go install
        inputs:
        - content: go install

  test:
    steps:
    - script:
        title: Print infos for the test
        inputs:
        - content: |-
            set -x
            go version
            echo $GO15VENDOREXPERIMENT
    - script:
        title: GOLIST_WITHOUT_VENDOR
        inputs:
        - content: |-
            set -e
            set -x
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Go Test
        inputs:
        - content: go test ./...
    - script:
        title: Err check
        inputs:
        - content: errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Test-build
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v
            mkdir -p ./_tmp
            go build -o ./_tmp/ci-bin
            ./_tmp/ci-bin setup --minimal
            rm ./_tmp/ci-bin

            # setup for the original bitrise as well
            bitrise setup --minimal
    - script:
        title: Step-template test
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            cd ./_step_template
            bitrise run test

  ci:
    before_run:
    - _prepare_and_setup
    - test
    steps:
    - slack:
        title: Slack notifications
        run_if: ".IsCI"
        inputs:
        - webhook_url: "$INTERNAL_DEV_SLACK_WEBHOOK_URL"
        - channel: "$INTERNAL_DEV_LIFELINE_SLACK_CHANNEL"
        - from_username: "${BITRISE_BIN_NAME} - CI - OK"
        - from_username_on_error: "${BITRISE_BIN_NAME} - CI - ERROR"
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}

  godeps-update:
    description: |-
      Dependency Update

      Used for updating bitrise dependencies with godep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            go get -u ./...
            rm -rf ./Godeps
            godep save ./...

  create-release-with-docker-compose:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            docker-compose build --no-cache app

            docker-compose run --rm app bitrise run create-release

  create-release:
    description: |-
      Create Bitrise release

      Used for publishing new version of bitrise
      CI, deploy, changelog
    before_run:
    - ci
    after_run:
    - create_changelog
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            if [ -f _bin/tmpbin ] ; then
              rm _bin/tmpbin
            fi
            go build -o _bin/tmpbin
            binversion="$(_bin/tmpbin -version)"
            echo "binversion: ${binversion}"
            mkdir -p _bin/${binversion}
            finalpth=_bin/${binversion}/${BITRISE_BIN_NAME}-$(uname -s)-$(uname -m)
            echo "finalpth: ${finalpth}"
            mv _bin/tmpbin "${finalpth}"
            # register the version for next steps
            envman add --key RELEASE_VERSION --value "${binversion}"
    - script:
        title: Creating release changelog template
        inputs:
        - content: |-
            changelog_path = "./_changelogs/#{ENV['RELEASE_VERSION']}.md"
            puts " * changelog_path: #{changelog_path}"
            template_content = File.read("./_changelogs/template.md")
            changelog_content = template_content.gsub("{{version}}", ENV['RELEASE_VERSION'])
            File.open(changelog_path, "w") do |f|
              f.write(changelog_content)
            end

            system("envman add --key changelog_path --value #{changelog_path}")
        - runner_bin: ruby

  announce-release:
    description: |-
      Announce Bitrise release

      Used for notifying about new version of bitrise
      deploy, notifications
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            go install
            # register the version for next steps
            binversion="$(${BITRISE_BIN_NAME} -version)"
            envman add --key RELEASE_VERSION --value "${binversion}"
    - slack@2.1.0:
        title: Announce on Internal Slack channel
        inputs:
        - webhook_url: "$INTERNAL_DEV_SLACK_WEBHOOK_URL"
        - channel: "$INTERNAL_DEV_SLACK_CHANNEL"
        - from_username: ${BITRISE_BIN_NAME}
        - message: |
            Release v${RELEASE_VERSION} was just published! :tada:

            You can find it at ${GITHUB_RELEASES_URL}
        - emoji: ":rocket:"
    - slack@2.1.0:
        title: Announce on Public Slack channel
        inputs:
        - webhook_url: "$PUBLIC_SLACK_WEBHOOK_URL"
        - channel: "$PUBLIC_SLACK_CHANNEL"
        - from_username: ${BITRISE_BIN_NAME}
        - message: |
            Release v${RELEASE_VERSION} was just published! :tada:

            You can find it at ${GITHUB_RELEASES_URL}
        - emoji: ":rocket:"

  noop:
    title: Empty workflow, for quick testing
    description: |-
      Noop
      empty workflow

  fail-test:
    title: Fails
    description: |-
      Fail test
      workflow will fail
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            exit 0
    - script@0.9.1:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            exit 2
    - script:
        is_always_run: true
        is_skippable: true
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            exit 2
    - script:
        is_always_run: false
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            exit 0
